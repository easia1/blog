 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/tasks", type: :request do
  before do
    @user = create(:user)
    sign_in @user
    @category = Category.create!(name: 'Test Category', details: 'Random detail', user_id: @user.id)
  end

  # let(:valid_category) {
  #     {name: 'Test Category', details: 'Random detail', user_id: @user.id}
  # }
  # Task. As you add validations to Task, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {name: 'Task Name', task_date: Date.today, user_id: @user.id, category_id: @category.id}
  }

  let(:invalid_attributes) {
    {name: nil, task_date: Date.today, user_id: @user.id, category_id: @category.id}
  }

  describe "GET /index" do
    it "renders a successful response" do
      # skip('May something wrong pa')
      task = Task.create! valid_attributes
      get category_url(task.category_id)

      expect(response).to have_http_status(422)
      
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      task = Task.create! valid_attributes
      get category_task_url(@category, task)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_category_task_url(@category)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      task = Task.create! valid_attributes
      get edit_category_task_url(@category, task)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Task" do
        expect {
          post category_tasks_url(@category), params: { task: valid_attributes }
        }.to change(Task, :count).by(1)
      end

      it "redirects to the created task" do
        post category_tasks_url(@category), params: { task: valid_attributes }
        expect(response).to redirect_to(category_task_path(@category, Task.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Task" do
        expect {
          post category_tasks_url(@category), params: { task: invalid_attributes }
        }.to change(Task, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post category_tasks_url(@category), params: { task: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {name: 'Bagong Task Name'}
      }

      it "updates the requested task" do
        task = Task.create! valid_attributes
        patch category_task_url(@category, task), params: { task: new_attributes }
        task.reload
        expect(Task.last.name).to eq(new_attributes[:name])
        # skip("Add assertions for updated state")
      end

      it "redirects to the task" do
        task = Task.create! valid_attributes
        patch category_task_url(@category, task), params: { task: new_attributes }
        task.reload
        expect(response).to redirect_to(category_task_url(@category, task))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        task = Task.create! valid_attributes
        patch category_task_url(@category, task), params: { task: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested task" do
      task = Task.create! valid_attributes
      expect {
        delete category_task_url(@category, task)
      }.to change(Task, :count).by(-1)
    end

    it "redirects to the tasks list" do
      task = Task.create! valid_attributes
      delete category_task_url(@category, task)
      expect(response).to redirect_to(category_url(@category))
    end
  end
end
